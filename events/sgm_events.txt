namespace = sgm_events
country_event = {
	# this stops GM getting stuck if the country they're controlling is destroyed
	id = sgm_events.1
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		OR = {
			has_country_flag = sgm_assumed_control
			is_country_type = sgm_game_master
		}
		is_ai = no
	}
	immediate = {
		random_country = {
			limit = {
				is_ai = yes
			}
			set_player = root
			set_country_flag = sgm_assumed_control
		}
	}
}

country_event = {
	id = sgm_events.2
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FromFrom
		FromFrom = {
			is_country_type = sgm_game_master
		}
	}
	immediate = {
		from = {
			every_system_megastructure = {
				limit = {
					owner = {
						is_country_type = sgm_game_master
					}
				}
				set_owner = root
			}
		}
	}
}

# A Megastructure has begun to be upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
country_event = {
	id = sgm_events.3
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = sgm_game_master
	}
	immediate = {
		remove_country_flag = built_dyson_sphere
		remove_country_flag = built_interstellar_assembly_site
		remove_country_flag = built_mega_art_installation_site
		remove_country_flag = built_ringworld
		remove_country_flag = built_sentry_array
		remove_country_flag = built_spyorb
		remove_country_flag = built_mega_shipyard_site
		remove_country_flag = built_strategic_coordination_center_site
		remove_country_flag = built_mega_art
		remove_country_flag = built_think_tank
		remove_country_flag = built_matter_decompressor_site
	}
}

# This = system
# From = scope spawn_system was fired in (check scope type first!)
# FromFromFromFrom = SGM country calling spawner
system_event = {
	id = sgm_events.4
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		set_star_flag = sgm_system_spawned
		from = {
			change_variable = {
				which = sgm_system_spawned_origin
				value = 1
			}
		}
		set_star_flag = sgm_system_spawned@from
		log = "System [this.GetName] has been spawned by SGM ([fromfromfromfrom.GetRealName]) from initializer file [this.GetNameInitilalizerSpawnSwitch]. Origin system: [from.GetName]. Jumps: [global_event_country.sgm_var_jumps_spawn_system] Distance: [global_event_country.sgm_var_distance_spawn_system] Connected: [this.Get_hyperlane_spawn_system] Discovered: [this.Get_is_discovered_spawn_system]"
		fromfromfromfrom = {
			create_message = {
				type = SGM_SYSTEM_SPAWNED
				localization = sgm_system_prevprev_GetName
				days = 10
				target = prev
			}
		}
		clear_global_event_target = sgm_system_country_spawner
	}
}
