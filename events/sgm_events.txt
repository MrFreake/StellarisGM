namespace = sgm_events
country_event = {
	# this stops GM getting stuck if the country they're controlling is destroyed
	id = sgm_events.1
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		OR = {
			has_country_flag = sgm_assumed_control
			is_country_type = sgm_game_master
		}
		is_ai = no
	}
	immediate = {
		random_country = {
			limit = {
				is_ai = yes
			}
			set_player = root
			set_country_flag = sgm_assumed_control
		}
	}
}

country_event = {
	id = sgm_events.2
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FromFrom
		FromFrom = {
			is_country_type = sgm_game_master
		}
	}
	immediate = {
		from = {
			every_system_megastructure = {
				limit = {
					owner = {
						is_country_type = sgm_game_master
					}
				}
				set_owner = root
			}
		}
	}
}

# A Megastructure has begun to be upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
country_event = {
	id = sgm_events.3
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = sgm_game_master
	}
	immediate = {
		remove_country_flag = built_dyson_sphere
		remove_country_flag = built_interstellar_assembly_site
		remove_country_flag = built_mega_art_installation_site
		remove_country_flag = built_ringworld
		remove_country_flag = built_sentry_array
		remove_country_flag = built_spyorb
		remove_country_flag = built_mega_shipyard_site
		remove_country_flag = built_strategic_coordination_center_site
		remove_country_flag = built_mega_art
		remove_country_flag = built_think_tank
		remove_country_flag = built_matter_decompressor_site
	}
}

# This = system
# From = scope spawn_system was fired in (check scope type first!)
# FromFromFromFrom = SGM country calling spawner
system_event = {
	id = sgm_events.4
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		set_star_flag = sgm_system_spawned
		from = {
			change_variable = {
				which = sgm_system_spawned_origin
				value = 1
			}
		}
		set_star_flag = sgm_system_spawned@from
		log = "System [this.GetName] has been spawned by SGM ([fromfromfromfrom.GetRealName]) from initializer file [this.GetNameInitilalizerSpawnSwitch]. Origin system: [from.GetName]. Jumps: [global_event_country.sgm_var_jumps_spawn_system] Distance: [global_event_country.sgm_var_distance_spawn_system] Connected: [this.Get_hyperlane_spawn_system] Discovered: [this.Get_is_discovered_spawn_system]"
		fromfromfromfrom = {
			create_message = {
				type = SGM_SYSTEM_SPAWNED
				localization = sgm_system_prevprev_GetName
				days = 10
				target = prev
			}
		}
		clear_global_event_target = sgm_system_country_spawner
	}
}

# this = country
# from = planet/fleet/country/megastructure
# fromfrom = button pressing country

country_event = {
	id = sgm_events.5
	is_triggered_only = yes
	#title = sgm_events_5
	#desc = sgm_events_5_desc
	#picture = GFX_evt_alien_city
	hide_window = yes

	immediate = {
		fromfrom = {
			random_list = {
				5 = { roll_result_effect = { roll_result = 1 } }
				5 = { roll_result_effect = { roll_result = 2 } }
				5 = { roll_result_effect = { roll_result = 3 } }
				5 = { roll_result_effect = { roll_result = 4 } }
				5 = { roll_result_effect = { roll_result = 5 } }
				5 = { roll_result_effect = { roll_result = 6 } }
				5 = { roll_result_effect = { roll_result = 7 } }
				5 = { roll_result_effect = { roll_result = 8 } }
				5 = { roll_result_effect = { roll_result = 9 } }
				5 = { roll_result_effect = { roll_result = 10 } }
				5 = { roll_result_effect = { roll_result = 11 } }
				5 = { roll_result_effect = { roll_result = 12 } }
				5 = { roll_result_effect = { roll_result = 13 } }
				5 = { roll_result_effect = { roll_result = 14 } }
				5 = { roll_result_effect = { roll_result = 15 } }
				5 = { roll_result_effect = { roll_result = 16 } }
				5 = { roll_result_effect = { roll_result = 17 } }
				5 = { roll_result_effect = { roll_result = 18 } }
				5 = { roll_result_effect = { roll_result = 19 } }
				5 = { roll_result_effect = { roll_result = 20 } }
			}
		}
	}
}

country_event = {
	# Opens ping menu
	id = sgm_events.6
	is_triggered_only = yes
	title = MATCHMAKING_SERVER_PING
	desc = MATCHMAKING_SERVER_PING
	picture = GFX_evt_glitchy_matrix
	immediate = {
		if = {
			limit = {
				exists = event_target:target_megastructure
			}
			event_target:target_megastructure = {
				solar_system = {
					save_global_event_target_as = target_megastructure_solar_system
				}
			}
		}
		if = {
			limit = {
				exists = event_target:target_country
				event_target:target_country = {
					exists = capital_scope
				}
			}
			event_target:target_country = {
				capital_scope = {
					save_global_event_target_as = target_country_capital_scope					# Also used in teleport script.
					solar_system = {
						save_global_event_target_as = target_country_capital_scope_solar_system
					}
				}
			}
		}
		if = {
			limit = {
				exists = event_target:target_planet
			}
			event_target:target_planet = {
				solar_system = {
					save_global_event_target_as = target_planet_solar_system
				}
			}
		}
		if = {
			limit = {
				exists = event_target:target_fleet
			}
			event_target:target_fleet = {
				solar_system = {
					save_global_event_target_as = target_fleet_solar_system
				}
			}
		}
	}
	option = {
		name = sgm_fleet.3.fleet
		trigger = {
			exists = event_target:target_fleet
		}
		event_target:target_fleet = {
			save_global_event_target_as = target_ping
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_fleet
			}
		}
	}
	option = {
		name = sgm_fleet.3.planet
		trigger = {
			exists = event_target:target_planet
		}
		event_target:target_planet = {
			save_global_event_target_as = target_ping
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_planet
			}
		}
	}
	option = {
		name = sgm_fleet.3.country
		trigger = {
			exists = event_target:target_country
		}
		event_target:target_country = {
			save_global_event_target_as = target_ping
		}
		event_target:target_country = {
			if = {
				limit = {
					exists = capital_scope
				}
				capital_scope = {
					save_global_event_target_as = target_ping
				}
			}
			else_if = {
				limit = {
					num_owned_planets > 0
				}
				random_owned_planet = {
					save_global_event_target_as = target_ping
				}
			}
			else_if = {
				limit = {
					controlled_systems > 0
				}
				random_system_within_border = {
					random_system_planet = {
						limit = {
							is_primary_star = yes
						}
						save_global_event_target_as = target_ping
					}
				}
			}
			else_if = {
				limit = {
					num_fleets > 0
				}
				random_owned_fleet = {
					save_global_event_target_as = target_ping
				}
			}
			else = {
				random_galaxy_planet = {
					save_global_event_target_as = target_ping
				}
			}
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_ping
			}
		}
	}
	option = {
		name = sgm_fleet.3.megastructure
		trigger = {
			exists = event_target:target_megastructure
		}
		event_target:target_megastructure = {
			save_global_event_target_as = target_ping
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_megastructure_solar_system
			}
		}
	}
	option = {
		name = sgm_fleet.3.ambient_object
		trigger = {
			exists = event_target:target_ambient_object
		}
		event_target:target_ambient_object = {
			save_global_event_target_as = target_ping
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_ambient_object
			}
		}
	}
	option = {
		name = sgm_fleet.3.system
		trigger = {
			exists = event_target:target_system
		}
		event_target:target_system = {
			save_global_event_target_as = target_ping
		}
		event_target:target_system = {
			random_system_planet = {
				limit = {
					is_primary_star = yes
				}
				save_global_event_target_as = target_system_primary_star
			}
		}
		every_country = {
			limit = {
				is_ai = no
			}
			create_message = {
				type = SGM_PING
				localization = MESSAGE_SGM_PING_DESC
				days = 30
				target = event_target:target_system_primary_star
			}
		}
	}
	option = {
		name = CANCEL
	}
}
