# PLANET NOTIFICATIONS

# Triggers when ground combat starts
# This = planet
# From = country attacking
on_ground_combat_started = {
	events = {
		sgm_notify.100 # notification for planet events
	}
}

#A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
# Root = Planet
# From = Country
# FromFrom = Fleet of the science ship that surveyed it, if any
on_planet_surveyed = {
	events = {
		sgm_notify.101 # notification for planet events
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		sgm_notify.102 # notification for planet events
	}
}

# Triggers when a Special Project to uplift a pre-sapient species is completed.
# Note that this will trigger once for each combination of planet & original
# species (but for uplifting this should be only once).
#
# Scope = planet_event
# This = planet scope
# From = uplifted species (pre-modification)
on_uplift_completion = {
	events = {
		sgm_notify.103 # notification for planet events
	}
}

# A pop has finished purging
# This = Planet scope
# From = Country
# FromFrom = Pop
on_pop_purged = {
	events = {
		sgm_notify.104 # notification for planet events
	}
}

# Planets starts being terraformed
# This = Planet
# From = Terraforming country
on_terraforming_begun = {
	events = {
		sgm_notify.105 # notification for planet events
	}
}

# Planet has taken damage from orbital bombardment - Damage is applied daily
# This = Planet
# From = Bombarder
on_planet_bombarded = {
	events = {
		sgm_notify.106 # notification for planet events
	}
}

# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# FromFrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		sgm_notify.108 # notification for planet events
	}
}

#Fired whenever a new owner is set for a planet,
#be it after a war or through a trade
#From = Country scope (new owner)
#This = Planet scope
on_planet_transfer = {
	events = {
		sgm_notify.107 # notification for planet events
	}
}

# THIS = Planet: Branch office planet
# FROM = Country: Branch office owner
on_branch_office_established = {
	events = {
		sgm_notify.109 # notification for planet events
	}
}

#Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
#Fired in ADDITION to on_planet_transfer
#From = Country scope (new owner)
#This = Planet scope
on_planet_conquer = {
	events = {
		sgm_notify.110 # notification for planet events
	}
}

# COUNTRY NOTIFICATIONS

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
on_planet_attackers_win = {
	events = {
		sgm_notify.121
	}
}

# Triggers country_event for the defender upon victory
# Root = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		sgm_notify.122
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
		sgm_notify.123
	}
}

# Executed right after country has established communications with another country
# This = Country which established the communications
# From = Country which communications were established with
on_post_communications_established = {
	events = {
		sgm_notify.124
	}
}

# Triggers when a Special Project to apply a species modification template has completed.
# Note that this will trigger once for each combination of planet & original species.
#
# This = Country
# From = Species ( Post Modification )
on_modification_complete = {
	events = {
		sgm_notify.125
	}
}

#This = Country scope, new federation leader
#From = Previous leader (if still existing)
on_federation_new_leader = {
	events = {
		sgm_notify.126
	}
}

# this = country
on_pirate_spawn = {
	events = {
		sgm_notify.127
	}
}

# From = system
# FromFrom = country (new owner)
# This = country (previous owner)
on_system_lost = {
	events = {
		sgm_notify.128
	}
}

# From = system
# FromFrom = country (previous owner)
# This = country (new owner)
on_system_gained = {
	events = {
		sgm_notify.129
	}
}

# This = Country
on_relic_activated = {
	events = {
		sgm_notify.130
	}
}

# Executed just as country is changing its government, after the new one is applied
# THIS = country
on_post_government_changed = {
	events = {
		sgm_notify.131
	}
}

# Executed when a country picks an ascension perk
# THIS = country
on_ascension_perk_picked = {
	events = {
		sgm_notify.133
	}
}

# A Megastructure has been built
# Root = Country
# From = Megastructure
# FromFrom = System
# FromFromFrom = Fleet
on_megastructure_built = {
	events = {
		sgm_notify.134
	}
}